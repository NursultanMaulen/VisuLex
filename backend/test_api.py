#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API –¥–ª—è VisuLex —Å Hugging Face –º–æ–¥–µ–ª—è–º–∏
"""

import requests
import json
import time

BASE_URL = "http://localhost:8000"

def test_health():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    try:
        response = requests.get(f"{BASE_URL}/")
        print(f"‚úÖ Health check: {response.status_code}")
        print(f"   Response: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        return False

def test_detailed_health():
    """–¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        response = requests.get(f"{BASE_URL}/health")
        print(f"‚úÖ Detailed health check: {response.status_code}")
        data = response.json()
        print(f"   Status: {data.get('status')}")
        print(f"   Device: {data.get('device')}")
        print(f"   Models: {data.get('models')}")
        print(f"   Documents: {data.get('documents_count')}")
        return True
    except Exception as e:
        print(f"‚ùå Detailed health check failed: {e}")
        return False

def test_upload():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª
        test_content = """
        –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Hugging Face –º–æ–¥–µ–ª–µ–π.
        
        –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:
        1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
        2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        3. –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        –î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.
        """
        
        files = {'file': ('test_document.txt', test_content, 'text/plain')}
        response = requests.post(f"{BASE_URL}/upload", files=files)
        print(f"‚úÖ Upload: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   Document ID: {data.get('doc_id')}")
            print(f"   Filename: {data.get('filename')}")
            print(f"   Summary: {data.get('summary')[:100]}...")
            print(f"   Text length: {data.get('text_length')}")
            return data.get('doc_id')
        else:
            print(f"   Error: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Upload failed: {e}")
        return None

def test_ask(doc_id):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞"""
    if not doc_id:
        print("‚ùå Cannot test ask without doc_id")
        return False
    
    try:
        questions = [
            "–ß—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ?",
            "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è?",
            "–î–ª—è —á–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç?"
        ]
        
        for i, question in enumerate(questions, 1):
            data = {
                "doc_id": doc_id,
                "question": question
            }
            response = requests.post(f"{BASE_URL}/ask", json=data)
            print(f"‚úÖ Ask {i}: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"   Question: {result.get('question')}")
                print(f"   Answer: {result.get('answer')[:100]}...")
                print(f"   Confidence: {result.get('confidence', 0):.2f}")
            else:
                print(f"   Error: {response.text}")
            
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return True
        
    except Exception as e:
        print(f"‚ùå Ask failed: {e}")
        return False

def test_history():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        response = requests.get(f"{BASE_URL}/history")
        print(f"‚úÖ History: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   Documents count: {len(data)}")
            for doc_id, doc_info in data.items():
                print(f"   - {doc_id}: {doc_info.get('filename')} ({doc_info.get('file_type')})")
        else:
            print(f"   Error: {response.text}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå History failed: {e}")
        return False

def test_document_details(doc_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    if not doc_id:
        print("‚ùå Cannot test document details without doc_id")
        return False
    
    try:
        response = requests.get(f"{BASE_URL}/document/{doc_id}")
        print(f"‚úÖ Document details: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   Filename: {data.get('filename')}")
            print(f"   Summary: {data.get('summary')[:100]}...")
            print(f"   Text length: {data.get('text_length')}")
            print(f"   Has embeddings: {data.get('embeddings') is not None}")
        else:
            print(f"   Error: {response.text}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Document details failed: {e}")
        return False

def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VisuLex API —Å Hugging Face –º–æ–¥–µ–ª—è–º–∏...")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    health_ok = test_health()
    if not health_ok:
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤")
        return
    
    test_detailed_health()
    
    doc_id = test_upload()
    if doc_id:
        test_ask(doc_id)
        test_document_details(doc_id)
    
    test_history()
    
    print("=" * 70)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π API —Å Hugging Face –º–æ–¥–µ–ª—è–º–∏!")
    print("   - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è")
    print("   - –í–æ–ø—Ä–æ—Å—ã-–æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    print("   - –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")

if __name__ == "__main__":
    main()
