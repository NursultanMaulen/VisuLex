from fastapi import FastAPI, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uuid
import logging
from app.services import huggingface_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="VisuLex API", description="API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Hugging Face –º–æ–¥–µ–ª–µ–π")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
documents = {}

class AskRequest(BaseModel):
    doc_id: str
    question: str

class DocumentInfo(BaseModel):
    doc_id: str
    filename: str
    summary: str
    text_length: int
    file_type: str

@app.post("/upload", response_model=DocumentInfo)
async def upload(file: UploadFile):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é Hugging Face –º–æ–¥–µ–ª–µ–π"""
    try:
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {file.filename}, —Ç–∏–ø: {file.content_type}")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = await file.read()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é Hugging Face
        result = huggingface_service.process_document(file_content, file.content_type or "text/plain")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        doc_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        document_info = {
            "doc_id": doc_id,
            "filename": file.filename,
            "summary": result.get("summary", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"),
            "text_length": len(result.get("text", "")),
            "file_type": file.content_type or "text/plain",
            "text": result.get("text", ""),
            "embeddings": result.get("embeddings", None)
        }
        
        documents[doc_id] = document_info
        
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        logger.info(f"–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {len(documents)}")
        
        return DocumentInfo(**document_info)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@app.post("/ask")
async def ask(request: AskRequest):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É —Å –ø–æ–º–æ—â—å—é Hugging Face QA –º–æ–¥–µ–ª–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
        logger.info(f"–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {request.doc_id} –≤ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
        if request.doc_id not in documents:
            logger.error(f"–î–æ–∫—É–º–µ–Ω—Ç {request.doc_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(documents.keys())}")
            raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        document = documents[request.doc_id]
        question = request.question
        
        logger.info(f"–í–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É {request.doc_id}: {question}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Hugging Face –º–æ–¥–µ–ª–∏
        qa_result = huggingface_service.answer_question(
            question=question,
            context=document["text"]
        )
        
        response = {
            "doc_id": request.doc_id,
            "question": question,
            "answer": qa_result["answer"],
            "confidence": qa_result["confidence"],
            "summary": document["summary"]
        }
        
        logger.info(f"–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é: {qa_result['confidence']:.2f}")
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {str(e)}")

@app.get("/history")
async def get_history():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        history = {}
        for doc_id, doc_info in documents.items():
            history[doc_id] = {
                "filename": doc_info["filename"],
                "summary": doc_info["summary"],
                "file_type": doc_info["file_type"],
                "text_length": doc_info["text_length"]
            }
        
        return history
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

@app.get("/document/{doc_id}")
async def get_document(doc_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
    try:
        if doc_id not in documents:
            raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return documents[doc_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")

@app.get("/")
def root():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return {
        "message": "VisuLex API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Hugging Face –º–æ–¥–µ–ª—è–º–∏! üöÄ",
        "status": "active",
        "models_loaded": len(huggingface_service._models_cache) > 0
    }

@app.get("/health")
async def health_check():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∏ –º–æ–¥–µ–ª–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Hugging Face —Å–µ—Ä–≤–∏—Å–∞
        models_status = {
            "text_model": "text_model" in huggingface_service._models_cache,
            "qa_model": "deepset/roberta-base-squad2" in huggingface_service._models_cache,
            "embedding_model": huggingface_service.embedding_model is not None
        }
        
        return {
            "status": "healthy",
            "device": huggingface_service.device,
            "models": models_status,
            "documents_count": len(documents),
            "api_version": "1.0.0"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return {
            "status": "unhealthy",
            "error": str(e)
        }
