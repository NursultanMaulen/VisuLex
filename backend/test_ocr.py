#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import requests
import json
import time

def test_ocr_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    # URL –±—ç–∫–µ–Ω–¥–∞
    base_url = "http://localhost:8000"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    try:
        response = requests.get(f"{base_url}/health")
        if response.status_code == 200:
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            health_data = response.json()
            print(f"   –°—Ç–∞—Ç—É—Å: {health_data.get('status')}")
            print(f"   –ú–æ–¥–µ–ª–∏: {health_data.get('models')}")
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR
    print("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR...")
    try:
        with open("test.jpg", "rb") as f:
            files = {"file": ("test.jpg", f, "image/jpg")}
            response = requests.post(f"{base_url}/upload", files=files)
            
        if response.status_code == 200:
            upload_data = response.json()
            doc_id = upload_data["doc_id"]
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, doc_id: {doc_id}")
            print(f"   –°–≤–æ–¥–∫–∞: {upload_data['summary'][:200]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return
    
    # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    questions = [
        "–ß—Ç–æ —ç—Ç–æ –∑–∞ –∫–æ–º–ø–∞–Ω–∏—è?",
        "–ö–∞–∫–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∫–∞–∑–∞–Ω?",
        "–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è?",
        "–ï—Å—Ç—å –ª–∏ QR –∫–æ–¥ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?",
        "–ö–∞–∫–∞—è –∞–∫—Ü–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è?"
    ]
    
    print(f"\n‚ùì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é...")
    for i, question in enumerate(questions, 1):
        print(f"\n   –í–æ–ø—Ä–æ—Å {i}: {question}")
        try:
            response = requests.post(
                f"{base_url}/ask",
                json={"doc_id": doc_id, "question": question}
            )
            
            if response.status_code == 200:
                answer_data = response.json()
                answer = answer_data.get("answer", "")
                confidence = answer_data.get("confidence", 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                if "<s>" in answer or "</s>" in answer or "<pad>" in answer:
                    print(f"   ‚ùå –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {answer}")
                elif not answer or answer == "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.":
                    print(f"   ‚ö†Ô∏è  –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {answer}")
                else:
                    print(f"   ‚úÖ –û—Ç–≤–µ—Ç: {answer[:150]}...")
                    print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"      –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
        time.sleep(1)
    
    # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...")
    try:
        response = requests.get(f"{base_url}/document/{doc_id}")
        if response.status_code == 200:
            doc_data = response.json()
            text = doc_data.get("text", "")
            print(f"   –î–ª–∏–Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤: {text[:300]}...")
            
            # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            key_elements = [
                "KAZKOMP.KZ", "–º–∞–≥–∞–∑–∏–Ω", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π", "—Ç–µ—Ö–Ω–∏–∫–∏",
                "–ö—É–∞–Ω—ã—à", "707", "068", "2050", "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "—Ç–µ–Ω–≥–µ"
            ]
            
            print(f"\n   –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
            for element in key_elements:
                if element.lower() in text.lower():
                    print(f"      ‚úÖ '{element}' –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ")
                else:
                    print(f"      ‚ùå '{element}' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ")
                    
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {response.status_code}")
            print(f"      –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
    
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_ocr_functionality()
