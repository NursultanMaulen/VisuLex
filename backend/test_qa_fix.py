#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ QA –º–æ–¥–µ–ª–∏
"""

import requests
import json

def test_qa_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ QA –º–æ–¥–µ–ª–∏"""
    
    # URL –±—ç–∫–µ–Ω–¥–∞
    base_url = "http://localhost:8000"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ QA –º–æ–¥–µ–ª–∏...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    try:
        response = requests.get(f"{base_url}/health")
        if response.status_code == 200:
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            health_data = response.json()
            print(f"   –°—Ç–∞—Ç—É—Å: {health_data.get('status')}")
            print(f"   –ú–æ–¥–µ–ª–∏: {health_data.get('models')}")
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    print("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...")
    try:
        with open("RUS_CV_Nursultan_Maulen.pdf", "rb") as f:
            files = {"file": ("test.pdf", f, "application/pdf")}
            response = requests.post(f"{base_url}/upload", files=files)
            
        if response.status_code == 200:
            upload_data = response.json()
            doc_id = upload_data["doc_id"]
            print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, doc_id: {doc_id}")
            print(f"   –°–≤–æ–¥–∫–∞: {upload_data['summary'][:100]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return
    
    # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    questions = [
        "Who is Nursultan?",
        "What is he studying?",
        "What is his GPA?",
        "What courses did he take?"
    ]
    
    print(f"\n‚ùì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤...")
    for i, question in enumerate(questions, 1):
        print(f"\n   –í–æ–ø—Ä–æ—Å {i}: {question}")
        try:
            response = requests.post(
                f"{base_url}/ask",
                json={"doc_id": doc_id, "question": question}
            )
            
            if response.status_code == 200:
                answer_data = response.json()
                answer = answer_data.get("answer", "")
                confidence = answer_data.get("confidence", 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                if "<s>" in answer or "</s>" in answer or "<pad>" in answer:
                    print(f"   ‚ùå –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {answer}")
                elif not answer or answer == "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.":
                    print(f"   ‚ö†Ô∏è  –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {answer}")
                else:
                    print(f"   ‚úÖ –û—Ç–≤–µ—Ç: {answer[:100]}...")
                    print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"      –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É...")
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –∏—Å—Ç–æ—Ä–∏—é
        response = requests.get(f"{base_url}/history")
        if response.status_code == 200:
            history = response.json()
            print(f"   –ò—Å—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {list(history.keys())}")
            if doc_id in history:
                print(f"   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {doc_id} –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏")
            else:
                print(f"   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç {doc_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏")
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {response.status_code}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        response = requests.get(f"{base_url}/document/{doc_id}")
        if response.status_code == 200:
            doc_data = response.json()
            text = doc_data.get("text", "")
            print(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {text[:200]}...")
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            if "Nursultan" in text:
                print("   ‚úÖ 'Nursultan' –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ")
            if "Computer Systems" in text:
                print("   ‚úÖ 'Computer Systems' –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ")
            if "GPA" in text:
                print("   ‚úÖ 'GPA' –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ")
                
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {response.status_code}")
            print(f"      –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
    
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_qa_fix()
